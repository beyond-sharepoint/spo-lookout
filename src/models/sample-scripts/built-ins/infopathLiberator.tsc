import * as _ from 'lodash';
import * as pnp from 'sp-pnp-js';
import { spLookout } from 'sp-lookout';
import * as bluebird from 'bluebird';
import * as JSZip from 'jszip';
import * as fastXmlParser from 'https://cdnjs.cloudflare.com/ajax/libs/fast-xml-parser/2.7.1/parser.js';

export class InfopathLiberator {
    web: pnp.Web = new pnp.Web(location.origin);

    decodeInfoPathAttachment(attachmentBase64: string): { fileName: string, data: ArrayBuffer } {
        const attachmentByteArray = spLookout.base64ToArrayBuffer(attachmentBase64);
        const attachmentDataView = new DataView(attachmentByteArray, 0);
        const fileNameLength = attachmentDataView.getUint8(20) * 2;

        let fileName = "";
        for (let i = 0; i < fileNameLength - 2; i += 2) {
            fileName += String.fromCharCode(attachmentDataView.getUint8(24 + i));
        }
        return {
            fileName: fileName,
            data: attachmentByteArray.slice(24 + fileNameLength)
        }
    }

    async decodeAttachmentsInForm(formJson: string): Promise<Array<any>> {
        const attachments = [];
        for (const path of spLookout.paths(formJson)) {
            const value = _.get(formJson, path);
            if (typeof value === 'string' && value.startsWith('x0lGQRQAAA')) {
                attachments.push(value);
            }
        }

        const decodedAttachments: Array<any> = [];
        for (const attachment of attachments) {
            const decodedAttachment = this.decodeInfoPathAttachment(attachment);
            decodedAttachments.push(decodedAttachment);
        }

        return decodedAttachments;
    }

    async saveFormAttachmentsAsZip(formServerRelativeUrl: string, targetFolder: string) {
        spLookout.reportProgress(`Retrieving ${formServerRelativeUrl}`);
        const form = this.web.getFileByServerRelativeUrl(formServerRelativeUrl);
        const targetZipFileName = formServerRelativeUrl.substring(formServerRelativeUrl.lastIndexOf('/')).replace(/\.xml$/, '.zip');
        const formXml = await form.getText();

        let formJson = fastXmlParser.parse(formXml);
        const decodedAttachments = await this.decodeAttachmentsInForm(formJson);

        const result: any = {
            formServerRelativeUrl,
            attachmentCount: decodedAttachments.length
        };

        spLookout.reportProgress(`Processing Attachments in ${formServerRelativeUrl}`);
        if (decodedAttachments.length > 0) {
            let zip = new JSZip();
            for (let decodedAttachment of decodedAttachments) {
                zip.file(decodedAttachment.fileName, decodedAttachment.data);
            }

            const formAttachmentsZip = await zip.generateAsync({ type: "arraybuffer" });

            await this.web.getFolderByServerRelativeUrl(targetFolder)
                .files
                .addChunked(targetFolder + targetZipFileName, formAttachmentsZip, data => {
                    spLookout.reportProgress(`Uploading ${targetFolder + targetZipFileName} (${data.chunkSize} of ${formAttachmentsZip.byteLength})`);
                }, true);

            result.zipServerRelativeUrl = targetFolder + targetZipFileName;
        }

        return result;
    }

    async saveAllFormAttachmentsAsZip(formsLibraryServerRelativeUrl: string, targetFolder: string) {
        let formsLibraryRootFolder = await this.web.getFolderByServerRelativeUrl(formsLibraryServerRelativeUrl);

        //Assert that the location exists and that it's a forms library.
        let folderInfo = await formsLibraryRootFolder.get();
        if (folderInfo.Exists !== true) {
            throw Error("The specified location does not exist.");
        }

        let properties = await formsLibraryRootFolder.properties.get();
        if (properties["vti_x005f_listservertemplate"] !== 115) {
            throw Error("The specified location was not a forms library.");
        }

        spLookout.reportProgress("Retrieving files...", properties);

        let results = [];
        let files = await formsLibraryRootFolder.files.get();
        await bluebird.map(_.sampleSize(files, 10), async (fileInfo: any) => {
            const attachmentResult = await this.saveFormAttachmentsAsZip(fileInfo.ServerRelativeUrl, targetFolder);
            results.push(attachmentResult);
        }, { concurrency: 3 });

        return results;
    }
}