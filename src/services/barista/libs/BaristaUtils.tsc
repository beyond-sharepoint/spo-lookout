import { isArray, isPlainObject, flatMap, map, concat, keys } from 'lodash';

class BaristaUtils {
    private context: any;
    private chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    private lookup = new Uint8Array(256);

    constructor(context: any) {
        this.context = context;
        for (let i = 0; i < this.chars.length; i++) {
            this.lookup[this.chars.charCodeAt(i)] = i;
        }
    }

    /* tslint:disable */
    arrayBufferToBase64(arrayBuffer: ArrayBuffer): string {
        let bytes = new Uint8Array(arrayBuffer),
            i, len = bytes.length, base64 = '';

        for (i = 0; i < len; i += 3) {
            base64 += this.chars[bytes[i] >> 2];
            base64 += this.chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
            base64 += this.chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
            base64 += this.chars[bytes[i + 2] & 63];
        }

        if ((len % 3) === 2) {
            base64 = base64.substring(0, base64.length - 1) + '=';
        } else if (len % 3 === 1) {
            base64 = base64.substring(0, base64.length - 2) + '==';
        }

        return base64;
    }

    base64ToArrayBuffer(base64: string): ArrayBuffer {
        let bufferLength = base64.length * 0.75,
            len = base64.length, i, p = 0,
            encoded1, encoded2, encoded3, encoded4;

        if (base64[base64.length - 1] === '=') {
            bufferLength--;
            if (base64[base64.length - 2] === '=') {
                bufferLength--;
            }
        }

        let arraybuffer = new ArrayBuffer(bufferLength),
            bytes = new Uint8Array(arraybuffer);

        for (i = 0; i < len; i += 4) {
            encoded1 = this.lookup[base64.charCodeAt(i)];
            encoded2 = this.lookup[base64.charCodeAt(i + 1)];
            encoded3 = this.lookup[base64.charCodeAt(i + 2)];
            encoded4 = this.lookup[base64.charCodeAt(i + 3)];

            bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
            bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
            bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
        }

        return arraybuffer;
    }
    /* tslint:enable */

    stringToArrayBuffer(str: string) {
        if (typeof ArrayBuffer !== 'undefined') {
            const buf = new ArrayBuffer(str.length);
            const view = new Uint8Array(buf);
            for (let i = 0; i !== str.length; ++i) {
                view[i] = str.charCodeAt(i) & 0xFF;
            }
            return buf;
        } else {
            const buf2 = new Array(str.length);
            for (let i = 0; i !== str.length; ++i) {
                buf2[i] = str.charCodeAt(i) & 0xFF;
            }
            return buf2;
        }
    }

    async getItem(key: string): Promise<any> {
        const originalHandler = this.context.onmessage;
        let resolveWorker, rejectWorker;
        let getItemPromise: Promise<any> = new Promise((resolve, reject) => {
            resolveWorker = resolve;
            rejectWorker = reject;
        });

        this.context.onmessage = (ev) => {
            resolveWorker(ev.data);
        };

        try {
            this.context.postMessage({
                result: 'getItem',
                key: key
            });
            return await getItemPromise;
        }
        finally {
            this.context.onmessage = originalHandler;
        }
    }

    async setItem(key: string, value: any): Promise<void> {
        const originalHandler = this.context.onmessage;
        let resolveWorker, rejectWorker;
        let setItemPromise: Promise<any> = new Promise((resolve, reject) => {
            resolveWorker = resolve;
            rejectWorker = reject;
        });

        this.context.onmessage = (ev) => {
            resolveWorker();
        };

        try {
            this.context.postMessage({
                result: 'setItem',
                key: key,
                value: value
            });
            await setItemPromise;
        }
        finally {
            this.context.onmessage = originalHandler;
        }
    }

    async removeItem(key: string): Promise<void> {
        const originalHandler = this.context.onmessage;
        let resolveWorker, rejectWorker;
        let removeItemPromise: Promise<any> = new Promise((resolve, reject) => {
            resolveWorker = resolve;
            rejectWorker = reject;
        });

        this.context.onmessage = (ev) => {
            resolveWorker();
        };

        try {
            this.context.postMessage({
                result: 'removeItem',
                key: key
            });
            await removeItemPromise;
        }
        finally {
            this.context.onmessage = originalHandler;
        }
    }

    isClass(obj: any) {
        return typeof obj === 'function' && /^\s*class\s+/.test(obj.toString());
    }

    paths(obj: object, parentKey?: string) {
        let result;
        if (isArray(obj)) {
            let idx = 0;
            result = flatMap(obj, (innerObj) => {
                return this.paths(innerObj, (parentKey || '') + '[' + idx++ + ']');
            });
        } else if (isPlainObject(obj)) {
            result = flatMap(keys(obj), (key) => {
                return map(this.paths(obj[key], key), (subkey) => {
                    return (parentKey ? parentKey + '.' : '') + subkey;
                });
            });
        } else {
            result = [];
        }
        return concat(result, parentKey || []);
    }

    reportProgress(message: string, details?: any) {
        (<any>this.context).postMessage({
            result: 'progress',
            message: message,
            details: details
        });

    }

    /**
     * Utility method to reject a promise if it does not settle within the specified timeout.
     * @param promise 
     * @param timeoutMillis 
     * @param errorMessage 
     */
    private timeout(promise: Promise<any>, timeoutMillis: number, errorMessage?: string): Promise<any> {
        var timeout;

        return Promise.race([
            promise,
            new Promise((resolve, reject) => {
                timeout = setTimeout(
                    () => {
                        reject(new Error(errorMessage || 'Timeout Error'));
                    },
                    timeoutMillis
                );
            }),
        ]).then(
            (v: any) => {
                clearTimeout(timeout);
                return v;
            },
            (err: any) => {
                clearTimeout(timeout);
                throw err;
            }
            );
    }
}

export const spLookout = new BaristaUtils(self);